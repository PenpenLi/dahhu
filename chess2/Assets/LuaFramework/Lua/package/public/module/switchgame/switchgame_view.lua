---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenz.
--- DateTime: 2018/7/18 12:01
---

-- ========================== 默认依赖 =======================================
local class = require("lib.middleclass")
local View = require('core.mvvm.view_base')
-- ==========================================================================
local Manager = require("package.public.module.function_manager")
local SwitchGameView = class('SwitchGameView', View)

local ModuleCache = ModuleCache
local ComponentUtil = ModuleCache.ComponentUtil
local GetComponentWithPath = ModuleCache.ComponentUtil.GetComponentWithPath
local ComponentTypeName = ModuleCache.ComponentTypeName
local SwitchGameConfig = require("package.public.module.switchgame.switchgame_config")
function SwitchGameView:initialize(...)
    View.initialize(self, "public/module/switchgame/public_switchgame.prefab", "Public_SwitchGame", 1)
    View.set_1080p(self)
    self.gameItems = {}
    self.regionItems = {}
    self.gameMajongItems = {}
    self.pokerItems = {}
    self.majiangItems = {}
    self.item = GetComponentWithPath(self.root, "Center/GamePage/MajongList/Viewport/Content/Ex", ComponentTypeName.Transform).gameObject
    self.item:SetActive(false)

    self.majongChoose = GetComponentWithPath(self.root, "Center/Game/Majong/Choose", ComponentTypeName.Transform).gameObject
    self.majongBtn = GetComponentWithPath(self.root, "Center/Game/Majong", ComponentTypeName.Button)
    self.pokerChoose = GetComponentWithPath(self.root, "Center/Game/Poker/Choose", ComponentTypeName.Transform).gameObject
    self.pokerBtn = GetComponentWithPath(self.root, "Center/Game/Poker", ComponentTypeName.Button)
    self.pokerList = GetComponentWithPath(self.root, "Center/GamePage/PokerList", ComponentTypeName.Transform).gameObject
    self.pokerParentObj = GetComponentWithPath(self.root, "Center/GamePage/PokerList/Viewport/Content", ComponentTypeName.Transform).gameObject
    self.majongList = GetComponentWithPath(self.root, "Center/GamePage/MajongList", ComponentTypeName.Transform).gameObject
    self.majongParentObj = GetComponentWithPath(self.root, "Center/GamePage/MajongList/Viewport/Content", ComponentTypeName.Transform).gameObject
    self.regionIcon = GetComponentWithPath(self.root, "Background/ImageLog", ComponentTypeName.Image)
    self.spriteHolder = GetComponentWithPath(self.root, "SpriteHolder", "SpriteHolder")
    self.itemRegion = ModuleCache.ComponentManager.Find(self.root, "Center/RegionList/background/ScrollView/Viewport/Regions/ItemTemplate")
    self.itemRegion:SetActive(false)
end

function SwitchGameView:initGameList(poker)


    self.majongChoose:SetActive(not poker)
    self.pokerChoose:SetActive(poker)
    self.majongBtn.enabled = poker
    self.pokerBtn.enabled = not poker
    self.pokerList:SetActive(poker)
    self.majongList:SetActive(not poker)
end



--更新金币数量
function SwitchGameView:refresh_gold(data)
    if not data then
        return
    end
end

function SwitchGameView:refresh_View(pokerDatas, majiangDatas)
    local function set_gameInfo(gameInfo, obj)
        local name = gameInfo.gameName
        if not gameInfo.open then
            name = "close"
        end
        obj.name = name
        local nameText = GetComponentWithPath(obj, "Name", ComponentTypeName.Text)
        local descText = GetComponentWithPath(obj, "Desc", ComponentTypeName.Text)
        local diamondNumText = GetComponentWithPath(obj, "Diamond/Num", ComponentTypeName.Text)
        local iconImg = GetComponentWithPath(obj, "Icon", ComponentTypeName.Image)
        local closeObj = GetComponentWithPath(obj, "Close", ComponentTypeName.Transform).gameObject
        closeObj:SetActive(not gameInfo.open)
        nameText.text = gameInfo.name
        descText.text = gameInfo.desc
        iconImg.sprite = ModuleCache.PlayModeUtil.getHeadIconRes(ModuleCache.PlayModeUtil.getConfigByAppAndGameName(gameInfo.gameName))
        iconImg:SetNativeSize()
        diamondNumText.text = "0"
        obj:SetActive(true)
    end

    local function init_show_view(datas, objItems, parentPbj)
        for i = 1, #datas do
            if objItems[i] == nil then
                local obj = self:clone(self.item, i, parentPbj)
                objItems[i] = obj
            end 
            set_gameInfo(datas[i], objItems[i])
        end
        if #objItems > #datas then
            for i = #datas + 1,  #objItems do
                objItems[i]:SetActive(false)
            end
        end 
    end
    init_show_view(pokerDatas, self.pokerItems, self.pokerParentObj)
    init_show_view(majiangDatas, self.majiangItems, self.majongParentObj)
end

function SwitchGameView:init_region_list()
    local getIndex = 0
    local firstObj = nil
    local function get_region_obj(name)
        getIndex = getIndex + 1
        if self.regionItems[getIndex] == nil then
            local obj = self:clone(self.itemRegion, getIndex)
            local noSelectLab = GetComponentWithPath(obj, "NoSelect/Text", ComponentTypeName.Text)
            local selectLab = GetComponentWithPath(obj, "Select/Text", ComponentTypeName.Text)
            self.regionItems[getIndex] = {obj = obj, noSelectLab = noSelectLab, selectLab = selectLab}
        end
        self.regionItems[getIndex].obj.name = name
        self.regionItems[getIndex].noSelectLab.text = name
        self.regionItems[getIndex].selectLab.text = name
    end

    self.regionData = SwitchGameConfig.get_region_list()
    local playMode = ModuleCache.PlayModeUtil.getInfoByGameId(ModuleCache.GameManager.getCurGameId())
    local switchGameInfo = SwitchGameConfig.get_region_by_name(playMode.name)
    get_region_obj(switchGameInfo.regionName)
    for regionname, value in pairs(self.regionData) do
        if regionname ~= switchGameInfo.regionName then
            get_region_obj(regionname)            
        end 
    end
end

function SwitchGameView:refresh_region(obj)

    for _, value in pairs(self.regionItems) do
        if value.obj == obj then
            value.selectLab.transform.parent.gameObject:SetActive(true)
        else
            value.selectLab.transform.parent.gameObject:SetActive(false)
        end
    end
    if ModuleCache.GameManager.channel == "HAOCAI" then
        self.regionIcon.gameObject:SetActive(false)
    else
        self.regionIcon.sprite = self.spriteHolder:FindSpriteByName(obj.name)
        self.regionIcon:SetNativeSize()
    end 

end

--获取玩法列表并排序
function SwitchGameView:get_game_list(usedPokerName, usedMajongName)
    local gameList = {}
    local curGame = ModuleCache.AppData.get_real_app_and_game_name()
    local config1 = SwitchGameConfig.gameNameGetPointConfig(curGame)
    local config2 = SwitchGameConfig.gameNameGetPointConfig(usedPokerName)
    local config3 = SwitchGameConfig.gameNameGetPointConfig(usedMajongName)
    self:insert_game(gameList, config1)
    self:insert_game(gameList, config2)
    self:insert_game(gameList, config3)

    for _, v in ipairs(SwitchGameConfig.gameConfig) do
        if v.open and v.gameName ~= curGame and v.gameName ~= usedPokerName and v.gameName ~= usedMajongName then
            table.insert(gameList, v)
        end
    end

    return gameList
end

function SwitchGameView:insert_game(gameList, config)
    if gameList and config then
        local b
        for i = 1, #gameList do
            if gameList[i].gameName == config.gameName then
                b = true
            end
        end
        if not b then
            table.insert(gameList, config)
        end
    end
end

function SwitchGameView:diamondNum(data)
    for _, v in ipairs(SwitchGameConfig.gameConfig) do
        if v.obj then
            for _, d in ipairs(data) do
                if d.gameId == v.gameName or d.gameId == v.gameId then
                    local diamondNumText = GetComponentWithPath(v.obj, "Diamond/Num", ComponentTypeName.Text)
                    diamondNumText.text = d.balanceView
                end
            end
        end
    end
end

function SwitchGameView:clone(obj, name, parent)
    local target = ComponentUtil.InstantiateLocal(obj, Vector3.zero)
    if not parent then
        parent = obj.transform.parent
    end
    target.transform:SetParent(parent.transform)
    target.transform.localScale = Vector3.one
    target.transform.localPosition = Vector3.one
    target.name = tostring(name)
    ComponentUtil.SafeSetActive(target, true)
    return target
end

return SwitchGameView